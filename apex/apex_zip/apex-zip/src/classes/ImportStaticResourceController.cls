/**
 * Copyright (c) 2012, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

public with sharing class ImportStaticResourceController
{
    public transient Blob Content {get; set;}
    public String UnzippedFile {get; set;}
    public MetadataService.AsyncResult AsyncResult {get; private set;}  
    private static final String RESOURCE_NAME = 'upload' + UserInfo.getUserId();
    private static final String CONTENT_TYPE = 'application/zip';
    private static final String CACHE_CONTROL = 'private';
    private static final String DESCRIPTION = 'Temporary upload to unzip file for user ' + UserInfo.getName();
    private MetadataService.MetadataPort service;

    
    public ImportStaticResourceController() 
    {
        service = createService();
    }

    public PageReference upload() 
    { 
        this.showLoadingMessage();

        MetadataService.StaticResource staticResource = createStaticResource();
        if(resourceExists())
            this.updateResource(staticResource);
        else
            this.createResource(staticResource);

        return null;
    } 

    public PageReference checkAsyncRequest()
    {
        MetadataService.AsyncResult[] aysncResults = service.checkStatus(new String[] { AsyncResult.Id });
        if(aysncResults[0].done)
        {
            handleAsyncResult(aysncResults[0]);
        }
        else
        {
            this.showLoadingMessage();
        }
        return null;        
    }

    public static MetadataService.MetadataPort createService()
    { 
        MetadataService.MetadataPort service = new MetadataService.MetadataPort();
        service.SessionHeader = new MetadataService.SessionHeader_element();
        service.SessionHeader.sessionId = UserInfo.getSessionId();
        return service;        
    } 

    private void createResource(MetadataService.StaticResource staticResource)
    {
        AsyncResult = service.create(new List<MetadataService.Metadata> { staticResource })[0];
    }

    private void updateResource(MetadataService.StaticResource staticResource)
    {
        List<MetadataService.UpdateMetadata> updateMetadatas = new List<MetadataService.UpdateMetadata>();
        updateMetadatas.add(new MetadataService.UpdateMetadata());
        updateMetadatas[0].currentName = RESOURCE_NAME;
        updateMetadatas[0].metadata = staticResource;
        AsyncResult = service.updateMetadata(updateMetadatas)[0];           
    }

    private boolean resourceExists()
    {
        List<MetadataService.ListMetadataQuery> queries = new List<MetadataService.ListMetadataQuery>();        
        MetadataService.ListMetadataQuery queryStaticResource = new MetadataService.ListMetadataQuery();
        queryStaticResource.type_x = 'StaticResource';
        queries.add(queryStaticResource);                     
        MetadataService.FileProperties[] fileProperties = service.listMetadata(queries, 26);
        for(MetadataService.FileProperties fileProperty : fileProperties)
            if (fileProperty.fullName.equals(RESOURCE_NAME)) return true;
        return false;
    }

    private MetadataService.StaticResource createStaticResource()
    {
        MetadataService.StaticResource staticResource = new MetadataService.StaticResource();
        staticResource.fullName = RESOURCE_NAME;
        staticResource.contentType = CONTENT_TYPE;
        staticResource.cacheControl = CACHE_CONTROL;
        staticResource.description = DESCRIPTION;
        staticResource.content = EncodingUtil.base64Encode(Content);
        return staticResource;
    }

    private void showLoadingMessage()
    {
        ApexPages.addMessage(new ApexPages.message(ApexPages.Severity.INFO,'Uploading...'));
    }

    private void handleAsyncResult(MetadataService.AsyncResult asyncResult)
    {
        if(asyncResult.state == 'Error')
        {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error, asyncResult.message));
            AsyncResult = null;
        }
        else
        {
            completeUploadAndUnzip();
        }
    }

    private void completeUploadAndUnzip()
    {
        ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Info, 'Upload complete'));
        AsyncResult = null;

        PageReference contentTypes = new PageReference('/resource/' + RESOURCE_NAME + '/word/document.xml');
        UnzippedFile = contentTypes.getContent().toString();
    }

}