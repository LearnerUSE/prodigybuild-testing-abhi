



File 1: test2.py

# This program is a tic tac toe game written in Python

# Define the board
board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]

# Define the players
player1 = "X"
player2 = "O"

# Define the current player
current_player = player1

# Define the game status
game_still_going = True

# Define the winner
winner = None

# Define the function to display the board
def display_board():
  print(board[0] + " | " + board[1] + " | " + board[2])
  print(board[3] + " | " + board[4] + " | " + board[5])
  print(board[6] + " | " + board[7] + " | " + board[8])

# Define the function to handle a turn
def handle_turn(player):
  print(player + "'s turn.")
  position = input("Choose a position from 1-9: ")

  valid = False
  while not valid:

    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
      position = input("Choose a position from 1-9: ")
  
    position = int(position) - 1

    if board[position] == "-":
      valid = True
    else:
      print("You can't go there. Go again.")

  board[position] = player
  display_board()

# Define the function to check if the game is over
def check_if_game_over():
  check_for_winner()
  check_for_tie()

# Define the function to check for a winner
def check_for_winner():
  # Set up global variables
  global winner
  # Check rows
  row_winner = check_rows()
  # Check columns
  column_winner = check_columns()
  # Check diagonals
  diagonal_winner = check_diagonals()
  if row_winner:
    # There was a win
    winner = row_winner
  elif column_winner:
    # There was a win
    winner = column_winner
  elif diagonal_winner:
    # There was a win
    winner = diagonal_winner
  else:
    # There was no win
    winner = None

# Define the function to check the rows for a win
def check_rows():
  # Set up global variables
  global game_still_going
  # Check if any of the rows have all the same value (and is not empty)
  row_1 = board[0] == board[1] == board[2] != "-"
  row_2 = board[3] == board[4] == board[5] != "-"
  row_3 = board[6] == board[7] == board[8] != "-"
  # If any row does have a match, flag that there is a win
  if row_1 or row_2 or row_3:
    game_still_going = False
  # Return the winner (X or O)
  if row_1:
    return board[0] 
  elif row_2:
    return board[3] 
  elif row_3:
    return board[6] 
  # Or return None if there was no winner
  else:
    return None

# Define the function to check the columns for a win
def check_columns():
  # Set up global variables
  global game_still_going
  # Check if any of the columns have all the same value (and is not empty)
  column_1 = board[0] == board[3] == board[6] != "-"
  column_2 = board[1] == board[4] == board[7] != "-"
  column_3 = board[2] == board[5] == board[8] != "-"
  # If any column does have a match, flag that there is a win
  if column_1 or column_2 or column_3:
    game_still_going = False
  # Return the winner (X or O)
  if column_1:
    return board[0] 
  elif column_2:
    return board[1] 
  elif column_3:
    return board[2] 
  # Or return None if there was no winner
  else:
    return None

# Define the function to check the diagonals for a win
def check_diagonals():
  # Set up global variables
  global game_still_going
  # Check if any of the columns have all the same value (and is not empty)
  diagonal_1 = board[0] == board[4] == board[8] != "-"
  diagonal_2 = board[2] == board[4] == board[6] != "-"
  # If any diagonal does have a match, flag that there is a win
  if diagonal_1 or diagonal_2:
    game_still_going = False
  # Return the winner (X or O)
  if diagonal_1:
    return board[0] 
  elif diagonal_2:
    return board[2]
  # Or return None if there was no winner
  else:
    return None

# Define the function to check if there is a tie
def check_for_tie():
  # Set up global variables
  global game_still_going
  # If board is full
  if "-" not in board:
    game_still_going = False
    return True
  # Else there is no tie
  else:
    return False

# Define the function to flip the current player
def flip_player():
  # Global variables we need
  global current_player
  # If the current player was X, make it O
  if current_player == player1:
    current_player = player2
  # Or if the current player was O, make it X
  elif current_player == player2:
    current_player = player1

# Define the function to play the game
def play_game():
  # Display the initial board
  display_board()
  # While the game is still going
  while game_still_going:
    # Handle a turn
    handle_turn(current_player)
    # Check if the game is over
    check_if_game_over()
    # Flip to the other player
    flip_player()
  # The game has ended
  if winner == player1:
    print(player1 + " won.")
  elif winner == player2:
    print(player2 + " won.")
  elif winner == None:
    print("Tie.")

# Run the game
play_game()